#include <iostream>
using namespace std;

// Node structure for Doubly Linked List
struct Node {
    int data;
    Node* prev;
    Node* next;
    
    Node(int val) {
        data = val;
        prev = nullptr;
        next = nullptr;
    }
};

class DoublyLinkedList {
private:
    Node* head;
    Node* tail;
    
public:
    DoublyLinkedList() {
        head = nullptr;
        tail = nullptr;
    }
    
    // Insert at end
    void insertAtEnd(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr) {
            head = tail = newNode;
            return;
        }
        tail->next = newNode;
        newNode->prev = tail;
        tail = newNode;
    }
    
    // Insert at beginning
    void insertAtBeginning(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr) {
            head = tail = newNode;
            return;
        }
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
    }
    
    // Delete node by value (first occurrence)
    void deleteNode(int val) {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        
        Node* current = head;
        while (current != nullptr && current->data != val) {
            current = current->next;
        }
        
        if (current == nullptr) {
            cout << val << " not found in list.\n";
            return;
        }
        
        if (current == head) {
            head = head->next;
            if (head) head->prev = nullptr;
            else tail = nullptr; // list became empty
        } else if (current == tail) {
            tail = tail->prev;
            tail->next = nullptr;
        } else {
            current->prev->next = current->next;
            current->next->prev = current->prev;
        }
        
        delete current;
        cout << val << " deleted from the list.\n";
    }
    
    // Display forward
    void displayForward() {
        Node* temp = head;
        cout << "List (forward): ";
        while (temp != nullptr) {
            cout << temp->data << " <-> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
    
    // Display backward
    void displayBackward() {
        Node* temp = tail;
        cout << "List (backward): ";
        while (temp != nullptr) {
            cout << temp->data << " <-> ";
            temp = temp->prev;
        }
        cout << "NULL\n";
    }
};

int main() {
    DoublyLinkedList dll;
    
    dll.insertAtEnd(10);
    dll.insertAtEnd(20);
    dll.insertAtEnd(30);
    dll.displayForward();
    dll.displayBackward();
    
    dll.insertAtBeginning(5);
    dll.displayForward();
    
    dll.deleteNode(20);
    dll.displayForward();
    dll.displayBackward();
    
    dll.deleteNode(100); // Not in list
    
    return 0;
}

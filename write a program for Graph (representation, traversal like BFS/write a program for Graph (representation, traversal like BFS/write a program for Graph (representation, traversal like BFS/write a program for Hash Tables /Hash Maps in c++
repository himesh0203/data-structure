#include <iostream>
#include <list>
using namespace std;

class HashTable {
    static const int hashSize = 10; // Size of hash table
    list<pair<int, string>> table[hashSize]; // Array of lists for chaining

    // Simple hash function
    int hashFunction(int key) {
        return key % hashSize;
    }

public:
    // Insert key-value pair
    void insert(int key, const string& value) {
        int hashIndex = hashFunction(key);
        // Check if key already exists and update
        for (auto &item : table[hashIndex]) {
            if (item.first == key) {
                item.second = value;
                cout << "Updated key " << key << " with new value.\n";
                return;
            }
        }
        // Otherwise insert new pair
        table[hashIndex].push_back(make_pair(key, value));
        cout << "Inserted key " << key << " with value \"" << value << "\".\n";
    }

    // Search for a key
    void search(int key) {
        int hashIndex = hashFunction(key);
        for (auto &item : table[hashIndex]) {
            if (item.first == key) {
                cout << "Key " << key << " found with value: " << item.second << endl;
                return;
            }
        }
        cout << "Key " << key << " not found.\n";
    }

    // Delete a key
    void remove(int key) {
        int hashIndex = hashFunction(key);
        for (auto it = table[hashIndex].begin(); it != table[hashIndex].end(); ++it) {
            if (it->first == key) {
                table[hashIndex].erase(it);
                cout << "Key " << key << " deleted.\n";
                return;
            }
        }
        cout << "Key " << key << " not found to delete.\n";
    }

    // Display hash table contents
    void display() {
        for (int i = 0; i < hashSize; i++) {
            cout << "Bucket " << i << ": ";
            if (table[i].empty()) {
                cout << "Empty";
            } else {
                for (auto &item : table[i]) {
                    cout << "[" << item.first << ": " << item.second << "] ";
                }
            }
            cout << endl;
        }
    }
};

int main() {
    HashTable ht;

    ht.insert(1, "Apple");
    ht.insert(11, "Banana");
    ht.insert(21, "Cherry");
    ht.insert(2, "Date");

    ht.display();

    ht.search(11);
    ht.search(5);

    ht.remove(11);
    ht.remove(5);

    ht.display();

    return 0;
}

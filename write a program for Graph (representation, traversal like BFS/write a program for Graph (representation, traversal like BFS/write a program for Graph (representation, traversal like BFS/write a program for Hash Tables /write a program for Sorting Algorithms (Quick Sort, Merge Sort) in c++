#include <iostream>
#include <vector>
using namespace std;

// Quick Sort functions
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];  // pivot element
    int i = low - 1;        // index of smaller element

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);   // sort left subarray
        quickSort(arr, pi + 1, high);  // sort right subarray
    }
}

// Merge Sort functions
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Temporary arrays
    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;

    // Merge two subarrays back into arr
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) arr[k++] = L[i++];
        else arr[k++] = R[j++];
    }

    // Copy remaining elements if any
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);       // sort left half
        mergeSort(arr, mid + 1, right);  // sort right half

        merge(arr, left, mid, right);    // merge sorted halves
    }
}

// Helper function to print array
void printArray(const vector<int>& arr) {
    for (int val : arr) cout << val << " ";
    cout << endl;
}

int main() {
    vector<int> arr1 = {10, 7, 8, 9, 1, 5};
    vector<int> arr2 = arr1;  // Copy for merge sort

    cout << "Original array:\n";
    printArray(arr1);

    quickSort(arr1, 0, arr1.size() - 1);
    cout << "Array after Quick Sort:\n";
    printArray(arr1);

    mergeSort(arr2, 0, arr2.size() - 1);
    cout << "Array after Merge Sort:\n";
    printArray(arr2);

    return 0;
}
